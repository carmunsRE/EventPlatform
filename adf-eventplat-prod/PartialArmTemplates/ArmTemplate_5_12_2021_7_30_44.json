{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-eventplat-prod"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MasterPipe_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest_SQLSource",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pipe_Raw_demo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "CleanTransform_AllSources",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Ingest_SQLSource",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pipe_Clean",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Reporting_SendSources",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CleanTransform_AllSources",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pipe_Reporting",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-07T18:31:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipe_Raw_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipe_Raw_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Schema_PartitionID} as PartitionID, @{pipeline().parameters.Control_Table_Schema_SourceTableName} as SourceTableName, @{pipeline().parameters.Control_Table_Schema_FilterQuery} as FilterQuery,\n@{pipeline().parameters.Control_Table_Schema_PartitionDate} as PartitionDate from @{pipeline().parameters.Control_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "source_sqldb_toptal_controltable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 30,
							"activities": [
								{
									"name": "CopyOnePartition",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "@item().FilterQuery",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "source_sqldb_repes",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "destination_adl_raw_sqlsource",
											"type": "DatasetReference",
											"parameters": {
												"Data_Destination_Container": {
													"value": "@pipeline().parameters.Data_Destination_Container",
													"type": "Expression"
												},
												"Data_Destination_Directory": {
													"value": "@pipeline().parameters.Data_Destination_Directory",
													"type": "Expression"
												},
												"File_Name": {
													"value": "@concat(item().SourceTableName,'-',item().PartitionDate,'-',utcnow('yyyy-MM-ddTHH:mm:ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.ControlTable_demo"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String",
						"defaultValue": "PartitionID"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String",
						"defaultValue": "SourceTableName"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String",
						"defaultValue": "FilterQuery"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "event-platform"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "raw/sales-sql-source"
					},
					"Control_Table_Schema_PartitionDate": {
						"type": "string",
						"defaultValue": "PartitionDate"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-05-07T18:31:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dest_SQLToptal_SourceCategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb_toptal_copy",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Category",
						"type": "nvarchar"
					},
					{
						"name": "SubCategory",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "Source_EventCategory"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dest_SQLToptal_SourceFact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb_toptal_copy",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Reseller",
						"type": "nvarchar"
					},
					{
						"name": "SalesChannel",
						"type": "nvarchar"
					},
					{
						"name": "Category",
						"type": "nvarchar"
					},
					{
						"name": "SubCategory",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "PurchasedDate",
						"type": "date"
					},
					{
						"name": "PurchasedTickets",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "Source_FactSales"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dest_SQLToptal_SourceReseller')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb_toptal_copy",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Reseller",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimReseller"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_adl_masterGeography_daily')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adl_toptaleventplat",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MasterGeography.csv",
						"folderPath": "master",
						"fileSystem": "event-platform-daily"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_adl_masterevent_daily')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adl_toptaleventplat",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MasterEvents.csv",
						"folderPath": "master",
						"fileSystem": "event-platform-daily"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "SubCategory",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_adl_masterreseller_daily')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adl_toptaleventplat",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MasterResellers.csv",
						"folderPath": "master",
						"fileSystem": "event-platform-daily"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Reseller",
						"type": "String"
					},
					{
						"name": "ResellerID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_adl_raw_csvsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adl_toptaleventplat",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/sales-csv-source",
						"fileSystem": "event-platform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Transaction_x0020_ID",
						"type": "String"
					},
					{
						"name": "Event_x0020_name",
						"type": "String"
					},
					{
						"name": "Number_x0020_of_x0020_purchased_x0020_tickets",
						"type": "String"
					},
					{
						"name": "Total_x0020_amount",
						"type": "String"
					},
					{
						"name": "Sales_x0020_channel",
						"type": "String"
					},
					{
						"name": "Customer_x0020_first_x0020_name",
						"type": "String"
					},
					{
						"name": "Customer_x0020_last_x0020_name",
						"type": "String"
					},
					{
						"name": "Office_x0020_location",
						"type": "String"
					},
					{
						"name": "Created_Date",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_adl_raw_xmlsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adl_toptaleventplat",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/sales-xml-source",
						"fileSystem": "event-platform"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_adl_raw_xmlsource_daily')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adl_toptaleventplat",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/sales-xml-source",
						"fileSystem": "event-platform-daily"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_sqldb_toptal_controltable_demo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The external control table is used to store the partition list of data source tables.",
				"linkedServiceName": {
					"referenceName": "ls_sqldb_toptal",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IngestMasterToReporting')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "source_adl_masterGeography",
								"type": "DatasetReference"
							},
							"name": "SourceGeography"
						},
						{
							"dataset": {
								"referenceName": "source_adl_masterevent",
								"type": "DatasetReference"
							},
							"name": "SourceEventCategory"
						},
						{
							"dataset": {
								"referenceName": "source_adl_masterreseller",
								"type": "DatasetReference"
							},
							"name": "SourceResellers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLDB_Toptal_SourceGeography_demo",
								"type": "DatasetReference"
							},
							"name": "SinkSourceGeography"
						},
						{
							"dataset": {
								"referenceName": "Dest_SQLToptal_SourceCategory",
								"type": "DatasetReference"
							},
							"name": "SinkSourceCategory"
						},
						{
							"dataset": {
								"referenceName": "Dest_SQLToptal_SourceReseller",
								"type": "DatasetReference"
							},
							"name": "SinkSourceReseller"
						}
					],
					"transformations": [
						{
							"name": "DistinctRegion"
						},
						{
							"name": "RemoveNulls"
						},
						{
							"name": "DistrinctSubCat"
						},
						{
							"name": "CleanReseller"
						},
						{
							"name": "FilterNULL"
						}
					],
					"script": "source(output(\n\t\tCity as string,\n\t\tRegion as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceGeography\nsource(output(\n\t\tEvent as string,\n\t\tCategory as string,\n\t\tSubCategory as string,\n\t\tCity as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceEventCategory\nsource(output(\n\t\tReseller as string,\n\t\tResellerID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceResellers\nSourceGeography aggregate(groupBy(Country,\n\t\tRegion),\n\tTotal = count(City)) ~> DistinctRegion\nDistinctRegion derive(CleanRegion = case(isNull(Region)||Region == 'NULL',Country,Region)) ~> RemoveNulls\nSourceEventCategory aggregate(groupBy(Category,\n\t\tSubCategory),\n\tTotal = count(Event)) ~> DistrinctSubCat\nSourceResellers derive(CleanReseller = case(!isNull(ResellerID)||Reseller=='VENUE ORGANIZER', Reseller)) ~> CleanReseller\nCleanReseller filter(!isNull(CleanReseller)) ~> FilterNULL\nRemoveNulls sink(input(\n\t\tGeographyID as integer,\n\t\tCountry as string,\n\t\tRegion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCountry,\n\t\tRegion = CleanRegion\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkSourceGeography\nDistrinctSubCat sink(input(\n\t\tCategory as string,\n\t\tSubCategory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCategory,\n\t\tSubCategory\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkSourceCategory\nFilterNULL sink(input(\n\t\tReseller as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tReseller = CleanReseller\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkSourceReseller"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLDB_Toptal_SourceGeography_demo')]",
				"[concat(variables('factoryId'), '/datasets/Dest_SQLToptal_SourceCategory')]",
				"[concat(variables('factoryId'), '/datasets/Dest_SQLToptal_SourceReseller')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkXMLSource')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "source_adl_raw_xmlsource",
								"type": "DatasetReference"
							},
							"name": "xmlsourcefiles"
						},
						{
							"dataset": {
								"referenceName": "source_adl_masterGeography",
								"type": "DatasetReference"
							},
							"name": "MasterGeography"
						},
						{
							"dataset": {
								"referenceName": "source_adl_masterreseller",
								"type": "DatasetReference"
							},
							"name": "MasterReseller"
						},
						{
							"dataset": {
								"referenceName": "source_adl_masterevent",
								"type": "DatasetReference"
							},
							"name": "MasterEvent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "destination_adl_clean_xml",
								"type": "DatasetReference"
							},
							"name": "SinkCSVSources"
						}
					],
					"transformations": [
						{
							"name": "LookupGeography"
						},
						{
							"name": "Region"
						},
						{
							"name": "LookupReseller"
						},
						{
							"name": "LookupEvent"
						},
						{
							"name": "FlattenXML"
						}
					],
					"script": "source(output(\n\t\ttransactions as ({@date} as date, {@reseller-id} as short, transaction as ({@id} as integer, customer as (firstName as string, lastName as string), dateCreated as string, eventName as string, numberOfPurchasedTickets as short, officeLocation as string, salesChannel as string, totalAmount as double)[])\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tvalidationMode: 'none',\n\tnamespaces: false) ~> xmlsourcefiles\nsource(output(\n\t\tCity as string,\n\t\tRegion as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MasterGeography\nsource(output(\n\t\tReseller as string,\n\t\tResellerID as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MasterReseller\nsource(output(\n\t\tEvent as string,\n\t\tCategory as string,\n\t\tSubCategory as string,\n\t\tCity as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MasterEvent\nFlattenXML, MasterGeography lookup(trim(FlattenXML@City) == MasterGeography@City,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupGeography\nLookupEvent derive(CleanRegion = case(isNull(Region),Country,Region),\n\t\tMonthID = toInteger(toString(PurchasedDate, 'yyyyMM'))) ~> Region\nLookupGeography, MasterReseller lookup(toString(FlattenXML@ResellerID) == MasterReseller@ResellerID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupReseller\nLookupReseller, MasterEvent lookup(trim(FlattenXML@Event) == MasterEvent@Event\n\t&& trim(FlattenXML@City) == MasterEvent@City,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupEvent\nxmlsourcefiles foldDown(unroll(transactions.transaction, transactions.transaction),\n\tmapColumn(\n\t\tPurchasedDate = transactions.{@date},\n\t\tResellerID = transactions.{@reseller-id},\n\t\tTransactionID = transactions.transaction.{@id},\n\t\tCustomerFirstName = transactions.transaction.customer.firstName,\n\t\tCustomerLastName = transactions.transaction.customer.lastName,\n\t\tEventDate = transactions.transaction.dateCreated,\n\t\tEvent = transactions.transaction.eventName,\n\t\tPurchasedTickets = transactions.transaction.numberOfPurchasedTickets,\n\t\tCity = transactions.transaction.officeLocation,\n\t\tSalesChannel = transactions.transaction.salesChannel,\n\t\tTotalAmount = transactions.transaction.totalAmount\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenXML\nRegion sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tfilePattern:(concat('Clean-EventsSalesXML-Partition[n] - ',toString(currentUTC(),'yyyy-MM-dd'),'.csv')),\n\ttruncate: true,\n\tmapColumn(\n\t\tTransactionID,\n\t\tMonthID,\n\t\tResellerID = MasterReseller@ResellerID,\n\t\tReseller,\n\t\tSalesChannel,\n\t\tEvent = FlattenXML@Event,\n\t\tEventDate,\n\t\tCategory,\n\t\tSubCategory,\n\t\tCountry,\n\t\tRegion,\n\t\tCity = MasterGeography@City,\n\t\tCustomerFirstName,\n\t\tCustomerLastName,\n\t\tPurchasedDate,\n\t\tPurchasedTickets,\n\t\tTotalAmount\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkCSVSources"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source_adl_raw_xmlsource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipe_Reporting_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DropCreateSinkTables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "staging.Build_SourceTables"
						},
						"linkedServiceName": {
							"referenceName": "ls_sqldb_toptal_copy",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "IngestMasterReporting",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DropCreateSinkTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IngestMasterToReporting",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "IngestSalesReporting",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DropCreateSinkTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IngestSalesReporting",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Taxonomy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IngestMasterReporting",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "IngestSalesReporting",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Build_Taxonomy]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sqldb_toptal_copy",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-07T18:41:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/IngestMasterToReporting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_Toptal_SourceGeography_demo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb_toptal_copy",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "GeographyID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "Source_Geography"
				}
			},
			"dependsOn": []
		}
	]
}